name: build-daily
on:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch: # Enables manually
# on:
#  push:
#    branches:
#      - master

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  DOCKER_IMAGE: ghcr.io/x-tools-author/wx-tools-ubuntu-20.04:x86_64

jobs:
  update-tag:
    runs-on: ubuntu-latest
    outputs:
      commits_found: ${{ steps.recent.outputs.commits_found }}
      commits_count: ${{ steps.recent.outputs.commits_count }}
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Check Recent Commits
      uses: ./.github/actions/commit-checker
      id: recent
      with:
        since_hours: 24
    - name: Update continuous tag
      if: ${{ steps.recent.outputs.commits_found == 'true' }}
      run: |
        git config --global user.email "x-tools@outlook.com"
        git config --global user.name "x-tools-author"
        # git tag -fa continuous -m "chore: update to latest commit"
        # git push origin :refs/tags/continuous
        # git push origin continuous -f
        git tag -d continuous || true
        git push origin :refs/tags/continuous
        git tag continuous
        git push origin continuous -f
  update-release:
    runs-on: ubuntu-latest
    needs: update-tag
    if:  ${{ needs.update-tag.outputs.commits_found == 'true' }}
    outputs:
      commits_found: ${{ needs.update-tag.outputs.commits_found }}
      commits_count: ${{ needs.update-tag.outputs.commits_found }}
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Delete Release
      run: |
        gh release delete continuous -y || true
    - name: Create Release
      run: |
        gh release create continuous --title "Continuous Build" --notes "Daily build of wxTools..."
  release-for-windows:
    runs-on: windows-2022
    needs: update-release
    if:  ${{ needs.update-release.outputs.commits_found == 'true' }}
    strategy:
      matrix:
        arch: [x86, x64, x86_arm64]
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Build for Windows
      shell: cmd
      run: |
        git fetch --tags
        mkdir build
        cd build
        call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" ${{ matrix.arch }}
        cmake -DWXT_MAKE_ZIP:BOOL=ON -DWXT_DAILY_BUILD:BOOL=ON -DCMAKE_BUILD_TYPE=Release -DWXT_GENERATE_MSIX:BOOL=OFF -G "Ninja" ../
        cmake --build . --target wxTools
        dir && dir .\assets && dir .\assets\wxTools
    - name: Upload Release Asset for Windows
      shell: cmd
      run: |
        for %%f in (build\assets\*.zip) do gh release upload continuous "%%f"
  release-for-linux:
    runs-on: ubuntu-22.04
    needs: update-release
    if:  ${{ needs.update-release.outputs.commits_found == 'true' }}
    steps:
      - name: checkout
        uses: actions/checkout@v4
      - name: Build for Linux
        run: |
          chmod +x ${{ github.workspace }}/cmake/Linux/tools/linuxdeployqt
          docker pull ${{ env.DOCKER_IMAGE }}
          docker run --rm --privileged -v ${{ github.workspace }}:/workspace ${{ env.DOCKER_IMAGE }} /bin/bash -c "\
          cd /workspace && chmod +x ./scripts/ci-build-ubuntu-20.04.sh && ./scripts/ci-build-ubuntu-20.04.sh daily"
      - name: Upload Release Asset for Ubuntu
        run: |
          cd ${{ github.workspace }}/build
          find . -name "*.deb" -type f | while read file; do
            gh release upload continuous $file
          done
          echo "---------------------------------------------------------------------------------"
          cd ${{ github.workspace }}/build/appimage/wxTools
          find . -name "*.AppImage" -type f | while read file; do
            gh release upload continuous $file
          done
  release-for-macos:
    runs-on: macos-13
    needs: update-release
    if:  ${{ needs.update-release.outputs.commits_found == 'true' }}
    steps:
      - name: checkout
        uses: actions/checkout@v4
      - name: build for macos
        run: |
          git fetch --tags
          cmake --version
          mkdir build
          cd build
          cmake -DCMAKE_BUILD_TYPE=Release -DWXT_DAILY_BUILD:BOOL=ON -DWXT_GENERATE_MSIX:BOOL=OFF ../
          cmake --build . --target wxTools_pkg_dmg
          find . -name "*.pkg" -type f | while read file; do
            gh release upload continuous $file
          done
          find . -name "*.dmg" -type f | while read file; do
            gh release upload continuous $file
          done